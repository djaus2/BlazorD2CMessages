@page "/"
@page "/fetchdata"
@using BlazorD2CMessages.Shared
@inject HttpClient Http
@using System.Linq

<h1>Blazor WASM App: Monitor IoT Hub</h1>

<font color="purple">This app demonstrates fetching <b>IoT Hub</b> data via a <b>Blazor Service</b> using the <b>Azure IoT Hub SDK</b>.</font>
<br />
<font color="blue"><b>Hub Connection</b> details in <b>appsettings.json</b></font>
:
<br />
<small>SHARED_ACCESS_KEY_NAME</small>
<br />
<small>EVENT_HUBS_SAS_KEY</small>
<br />
<small>EVENT_HUBS_COMPATIBILITY_ENDPOINT</small>
<br />
<small>EVENT_HUBS_COMPATIBILITY_PATH</small>
<br />
<i>Nb:</i>Service Autostarts&nbsp;
<i>Delay = @delay</i>
<br />
<br />
<button @onclick="@( ()=>{IsTimerRunning = false;})">Stop</button>&nbsp;
<button @onclick="@( ()=>{ Sensors = new List<Sensor>(); Refresh().GetAwaiter();})">Start</button>&nbsp;
<button @onclick="@( ()=> { Sensors = new List<Sensor>(); })">Clear</button>&nbsp;
@if (IsTimerRunning)
{
    <em>Status:&nbsp;<font color="blue">Running.</font>.</em>
}
else
{
    <em>Status:&nbsp;<font color="red">Not Running..</font></em>
}

<br />
<br />

<table class="table">
    <thead>
        <tr>
            <th>No.</th>
            <th>Id</th>
            <th>Sensor Type</th>
            <th>Value</th>
            <th>Values</th>
            <th>State</th>
            <th>TimeStamp</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sensor in Sensors)
        {
            <tr>
                <td>@sensor.No</td>
                <td>@sensor.Id</td>
                <td>@sensor.SensorType</td>
                <td>@sensor.Value</td>
                <td>@sensor.ValuesStr</td>
                <td>@sensor.State.</td>
                <td>@sensor.TimeStamp</td>
            </tr>
        }
    </tbody>
</table>



@code {
    private List<Sensor> Sensors;

    private int delay = 1;
    private int delayMax = 16;

    protected override void OnInitialized()
    {
        Sensors = new List<Sensor>();
        Refresh().GetAwaiter();
        base.OnInitialized();
    }

    bool IsTimerRunning = false;
    async Task Refresh()
    {
        delay = 1;
        IsTimerRunning = true;
        while (IsTimerRunning)
        {
            await Task.Delay(TimeSpan.FromSeconds(delay));
            if (IsTimerRunning)
            {
                var sensors = await Http.GetFromJsonAsync<Sensor[]>("Sensor");
                //if (sensors.Count() == 0)
                //{
                //    if (delay < delayMax)
                //        delay *=2;
                //}
                //else
                //{
                //    if (delay > 1)
                //        delay /= 2;
                //}
                delay = 1;
                Sensors.InsertRange(0, sensors.Reverse());
                StateHasChanged();
            }

        }
    }


}
